tidyverse::tidyverse_packages()
getwd()
sakura <- read.csv("~/R_materials/Kyoto_Flowers.csv")
View(sakura)
# Tidy and Clean ----------------------------------------------------------
# First data point doesn't show until 812 AD... just skip ahead to that.
sakura <- sakura %>% filter(AD %in% 812:2015)
# look at column names
colnames(sakura)
# colnames don't look very neat and tidy...
colnames(sakura) <- sakura %>%
colnames() %>%
str_to_lower() %>%                  # to lower case letters
str_replace_all("\\.", "_")         # replace . with _
colnames(sakura)
# manually rename two of the columns...
colnames(sakura)[1] <- "year"
colnames(sakura)[2] <- "full_flowering_day_of_year"
# remove rows without flowering date
sakura <- sakura %>% filter(!is.na(full_flowering_date))
library(tidyverse)
library(stringr)
library(scales)
sakura <- read.csv("~/R_materials/Kyoto_Flowers.csv")
View(sakura)
# Tidy and Clean ----------------------------------------------------------
# First data point doesn't show until 812 AD... just skip ahead to that.
sakura <- sakura %>% filter(AD %in% 812:2015)
# look at column names
colnames(sakura)
# colnames don't look very neat and tidy...
colnames(sakura) <- sakura %>%
colnames() %>%
str_to_lower() %>%                  # to lower case letters
str_replace_all("\\.", "_")         # replace . with _
colnames(sakura)
# manually rename two of the columns...
colnames(sakura)[1] <- "year"
colnames(sakura)[2] <- "full_flowering_day_of_year"
# remove rows without flowering date
sakura <- sakura %>% filter(!is.na(full_flowering_date))
date_sep <- as.character(sakura$full_flowering_date) %>%
str_replace_all("(.{1})(.*)", "\\1.\\2") %>%            # split into two backreferences on the first digit, then place a .
as.data.frame()
glimpse(date_sep)
colnames(date_sep)[1] <- "date_fl"                        # properly name column
colnames(date_sep)
date_sep <- date_sep %>% separate(date_fl, c("month", "day"), "\\.")    # separate into 'month' and 'day' columns on .
sakura <- bind_cols(date_sep, sakura)   # combine date_sep into sakura
sakura <- sakura %>% select(-full_flowering_date, -full_flowering_day_of_year, -x, -data_type_code, -reference_name, -source_code)  # remove extraneous columns
glimpse(sakura)
sakura <- sakura %>%
mutate(bloom = make_date(year, month, day))
library(lubridate)
sakura <- sakura %>%
mutate(bloom = make_date(year, month, day))
glimpse(sakura)
View(date_sep)
library(tidyverse)
library(stringr)
library(scales)
sakura <- read.csv("~/R_materials/Kyoto_Flowers.csv")
View(sakura)
# Tidy and Clean ----------------------------------------------------------
# First data point doesn't show until 812 AD... just skip ahead to that.
sakura <- sakura %>% filter(AD %in% 812:2015)
# look at column names
colnames(sakura)
# colnames don't look very neat and tidy...
colnames(sakura) <- sakura %>%
colnames() %>%
str_to_lower() %>%                  # to lower case letters
str_replace_all("\\.", "_")         # replace . with _
colnames(sakura)
# manually rename two of the columns...
colnames(sakura)[1] <- "year"
colnames(sakura)[2] <- "full_flowering_day_of_year"
# remove rows without flowering date
sakura <- sakura %>% filter(!is.na(full_flowering_date))
# turn three digit number into month and day values.
date_sep <- as.character(sakura$full_flowering_date) %>%
str_replace_all("(.{1})(.*)", "\\1.\\2") %>%            # split into two backreferences on the first digit, then place a .
as.data.frame()
glimpse(date_sep)
colnames(date_sep)[1] <- "date_fl"                        # properly name column
colnames(date_sep)
date_sep <- date_sep %>% separate(date_fl, c("month", "day"), "\\.")    # separate into 'month' and 'day' columns on .
sakura <- bind_cols(date_sep, sakura)   # combine date_sep into sakura
sakura <- sakura %>% select(-full_flowering_date, -full_flowering_day_of_year, -x, -data_type_code, -reference_name, -source_code)  # remove extraneous columns
glimpse(sakura)
library(lubridate)
# ?make_date()
# ?format()
# use make_date function to create separate variable in full date format
sakura <- sakura %>%
mutate(bloom = make_date(year, month, day))
glimpse(sakura)
# Reformat date variables into specific date formats:
sakura$Day_Of_Year <- as.numeric(format(sakura$bloom, "%j"))   #  %j: decimal day of the year
sakura$Year <- format(sakura$bloom, "%Y")                      #  %Y: 4 digit year
sakura$Month <- format(sakura$bloom, "%b")                     #  %b: abbreviated month
sakura$Day <- format(sakura$bloom, "%d")                       #  %d: decimal date
glimpse(sakura)
# date format are all in <chr>
# for plotting need to convert with as.numeric() for axes!
sakura$Year %>% as.numeric() %>% glimpse()
# Plotting ----------------------------------------------------------------
ggplot(sakura, aes(x = as.numeric(Year), y = Day_Of_Year)) +
geom_point() +
geom_line() +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%d-%b"))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "lm") +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3) +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "lm") +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3) +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "lm") +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "glm") +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "rlm") +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "gam") +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "gam") +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "gam", formula = y~s(x, bs = "cs")) +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3) +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
ggplot(sakura, aes(x = year, y = Day_Of_Year)) +  # or just use original 'year' variable...
geom_point() +
geom_smooth(span = 0.2, size = 3, method = "gam", formula = y~s(x, bs = "cs")) +
scale_y_continuous(labels = function(x) format(as.Date(as.character(x), "%j"), "%b-%d"),
limits = c(84, 125))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Global Peace Index
library(tidyverse)          # includes dplyr, tidyr, ggplot2
library(scales)             # more options for scales on plots
library(ggrepel)            # dealing with overlapping text/labels
library(rvest)              # for web scraping: read_html(), html_table() functions
library(stringr)            # dealing with strings
library(forcats)            # change factor levels manually
# Web scrape: -------------------------------------------------------------
url <- "https://en.wikipedia.org/wiki/Global_Peace_Index"
GPI <- url %>%
read_html() %>%
html_nodes('table.wikitable:nth-child(29)') %>%
.[[1]] %>%
html_table()
# Inspect scraped data ----------------------------------------------------
glimpse(GPI)
# Tidy dataset ------------------------------------------------------------
GPI_rank <- GPI %>% select(Country, ends_with("rank"))
colnames(GPI_rank) <- colnames(GPI_rank) %>% tolower()   # turn "Country" into lower case...
glimpse(GPI_rank)
GPI_rank <- GPI_rank %>% gather(`2017 rank`:`2008 rank`, key = "year", value = "rank")
glimpse(GPI_rank)
GPI_rank$year <- GPI_rank$year %>% str_replace_all("rank", "") %>% trimws()
glimpse(GPI_rank)
GPI_rank <- GPI_rank %>% mutate(year = as.factor(year))
levels(GPI_rank$year)     # now as factor + no "rank" afterwards.
GPI_rank %>% head(15)
GPI_rank <- GPI_rank %>% mutate(rank = str_replace(rank, "\\=", ""))   #   take out '=' in rank values
GPI_rank$year <- GPI_rank$year %>% str_replace_all("rank", "") %>% trimws()
glimpse(GPI_rank)
GPI_rank <- GPI_rank %>% mutate(rank = str_replace(rank, "\\=", ""))   #   take out '=' in rank values
GPI_rank$rank <- as.numeric(GPI_rank$rank)
GPI_rank <- GPI_rank %>% arrange(year, rank)
glimpse(GPI_rank)
